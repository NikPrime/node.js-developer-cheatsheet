/*
Node.js - это среда выполнения JavaScript на сервере, построенная на движке V8, и позволяющая запускать JS на сервере


Устройство Node.js
  1. V8 - движок, выполняющий JS-код, и компилирующий его в машинный
  2. Libuv - библиотека, написанная на C, и обеспечивающая асинхронные операции ввода/вывода. Позволяет работать с файловой системой, сетевыми операциями и другими асинхронными задачами
  3. Core libraries - набор встроенных модулей (fs, http, events и другие)
  4. npm - менеджер пакетов. Позволяет работать со сторонними модулями и библиотеками
  5. Bindings - позволяет из JS работать с библиотеками и кодом C / C++
  6. Event loop - обеспечивает асинхронную обработку задач

Фазы Event loop:
  Ожидание синхронных операций и событий
  Проверка фазы
  1. Таймеры (setTimeout, setInterval)
  2. I / O коллбэки (Выполняются все колбеки кроме close, таймеров и setImmediate)
  3. Pending
  4. Poll (Получение новых событий ввода/вывода, нода может блокироваться)
  5. Check (Выполняются колбэки, заданные setImmediate)

Глобальные переменные:
global - аналог window для браузера
console - вызов консоли
performance - позволяет измерять производительность приложения
Buffer - набор байт, получаемый например при чтении файла
AbortController - позволяет прерывать promised based API

Таймеры:
setTimeout, clearTimeout
setInterval, clearInterval
setImmediate, clearImmediate - выполняется асинхронно, но как можно скорее

__dirname - путь до текущей папки
__filename - путь до текущей папки + имя файла с расширением
*/

// Perfomance - изменение производительности
performance.mark('start') // отметка
performance.measure(() => {}, 'start', 'end') // измерение между двумя отметками
performance.getEntries() // получение всех измерений

// Path - работа с путями к файлам и директориям в ОС
const path = require('path')
path.basename(__filename) // название файла
path.dirname(__filename) // имя директории, в которой находится файл
path.extname(__filename) // показывает расширение файла (например .js)
path.join(__dirname, 'server', 'index.html') // получаем абсолютный путь, склеивая аргументы

// Модуль fs (file system)
const fs = require('fs')
fs.mkdir(path.join('./'), (err) => {}) // создание новой папки, если существует - ошибка
fs.rmkdir(path.join('./')) // удаление папки
fs.writeFile('filePath', 'content') // создание нового файла
fs.appendFile('filePath', 'new_content') // дозапись / дополнение к файлу
fs.readFile('filePath', 'utf-8', (err, content) => {}) // чтение файла, если нет 2-го параметра - возвращает buffer
fs.watch('filePath') // отслеживает изменения файла
Buffer.from('content') // преобразует данные из буффера в нормальный вид

// Модуль os - позволяет получать информацию про ос, в которой находимся сейчас
const os = require('os')
os.platform() // название операционной системы
os.arch() // архитектура процессора
os.cpus() // получаем объект { model: модель процессора, speed: скорость, times: {user: ..., ... }
os.freemem() // сколько свободной памяти
os.totalmem() // сколько всего памяти
os.homedir() // базовая директория компьютера
os.uptime() // сколько времени включена система
